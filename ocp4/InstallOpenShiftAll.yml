---
- hosts: all
  vars:
    baseDomain: ""
    clusterName: ""
    vcenter:
      ip: ""
      datastore: ""
      username: ""
      password: ""
      datacenter: ""
      folder: ""
      template: ""
    vm:
      worker_ram: ""
      worker_cpus: ""
      master_ram: ""
      master_cpus: ""
      bootstrap_ram: ""
      bootstrap_cpus: ""
      disk_gb: ""
    pullSecret: ""
    sshKey: ""
    download:
      ocpClient: "http://mirror.openshift.com/pub/openshift-v4/clients/ocp/4.3.0/openshift-client-linux-4.3.0.tar.gz"
      ocpInstall: "http://mirror.openshift.com/pub/openshift-v4/clients/ocp/4.3.0/openshift-install-linux-4.3.0.tar.gz"
    b64:
      appendbootstrap: ""
      worker: ""
      master: ""
    table_item_worker1: { vm_name: "testworker1", vm_ram: "{{ vm.worker_ram }}", vm_cpus: "{{ vm.worker_cpus }}", ignition_file: "{{ b64worker }}", vm_mac: "" }
    table_item_worker2: { vm_name: "testworker2", vm_ram: "{{ vm.worker_ram }}", vm_cpus: "{{ vm.worker_cpus }}", ignition_file: "{{ b64worker }}", vm_mac: "" }
    table_item_master1: { vm_name: "testmaster1", vm_ram: "{{ vm.master_ram }}", vm_cpus: "{{ vm.master_cpus }}", ignition_file: "{{ b64master }}", vm_mac: "" }
    table_item_master2: { vm_name: "testmaster2", vm_ram: "{{ vm.master_ram }}", vm_cpus: "{{ vm.master_cpus }}", ignition_file: "{{ b64master }}", vm_mac: "" }
    table_item_master3: { vm_name: "testmaster3", vm_ram: "{{ vm.master_ram }}", vm_cpus: "{{ vm.master_cpus }}", ignition_file: "{{ b64master }}", vm_mac: "" }
    table_item_bootstrap: { vm_name: "testbootstrap", vm_ram: "{{ vm.bootstrap_ram }}", vm_cpus: "{{ vm.bootstrap_cpus }}", ignition_file: "{{ b64appendbootstrap }}", vm_mac: "" }

# Install  
  tasks:
    - name: Create .openshift directory if it does not exist
      file:
        path: ~/.openshift
        state: directory
        mode: '0755'
    - name: Create /tmp/ocp4 directory if it does not exist
      file:
        path: /tmp/ocp4
        state: directory
        mode: '0755'

#Trouver comment mettre le fichier pull-secret

    - name: Donwload file for ocp4
      unarchive:
        src: "{{ download.ocpClient }}"
        dest: /tmp/ocp4
        remote_src: yes

    - name: Donwload file for ocp4
      unarchive:
        src: "{{ download.ocpInstall }}"
        dest: /tmp/ocp4
        remote_src: yes

    - name: Move files to /usr/local/bin
      copy:
        src: /tmp/ocp4/{{ item }}
        dest: /usr/local/bin
        mode: '0755'
        remote_src: yes
      with_items:
        - oc
        - kubectl
        - openshift-install
        
    - name: Create .ssh directory if it does not exist
      file:
        path: ~/.ssh
        state: directory
        mode: '0755'
        
    - name: Create SSH Key
      openssh_keypair:
        path: ~/.ssh/id_rsa
      register: sshKey

    - name: Create .openshift directory if it does not exist
      file:
        path: ~/openshift4
        state: directory
        mode: '0755'

#Utiliser Template pour faire le fichier install-config.yaml
    - name: Copy install-config to local file
      local_action: get_url url="http://webocp4.fuji.bsctdas.local/ocp4file/install-config.yaml.j2" dest="./install-config.yaml.j2"
          
    - name: Get install-config.yaml
      template:
        src: "install-config.yaml.j2"
        dest: ~/openshift4/install-config.yaml
    
    - name: Backup the install-config.yaml file 
      copy:
        src: ~/openshift4/install-config.yaml
        dest: ~/openshift4/install-config.yaml.orig"
        remote_src: yes

    - name: Create manifests for OpenShift
      command: openshift-install create manifests --dir ~/openshift4

    - name: Change mastersSchedulable to false
      lineinfile:
        path: ~/openshift4/manifests/cluster-scheduler-02-config.yml
        regexp: 'mastersSchedulable: true'
        line: "  mastersSchedulable: false"

    - name: Create ignition for OpenShift
      command: openshift-install create ignition-configs --dir ~/openshift4
    
# Trouver pour crÃ©er append-bootstrap.ign
    - name: Copy install-config to local file
      local_action: get_url url="http://webocp4.fuji.bsctdas.local/ocp4file/append-bootstrap.ign.j2" dest="./append-bootstrap.ign.j2"
    
    - name: Get append-bootstrap.ign
      template:
        src: "append-bootstrap.ign.j2"
        dest: ~/openshift4/append-bootstrap.ign

#    - name: Transfer bootstrap ignifition file from Bastion to Webserver
#      synchronize:
#        use_ssh_args: yes
#        src: ~/openshift4/bootstrap.ign
#        dest: /var/www/html/ignition/test/bootstrap.ign
#        mode: pull
#      delegate_to: "{{ webserver }}"
#      remote_user: root
      
    
#    - name: Convert ignition files to base64
#      shell: "base64 -w0 ~/openshift4/{{ item }}.ign > ~/openshift4/{{ item }}.64"
#      loop:
#        - append-bootstrap
#        - master
#        - worker
        
    - name: get b64 to var
      slurp:
        src: ~/openshift4/append-bootstrap.ign
      register: b64appendbootstrap
      
    - name: get b64 to var
      slurp:
        src: ~/openshift4/worker.ign
      register: b64worker
      
    - name: get b64 to var
      slurp:
        src: ~/openshift4/master.ign
      register: b64master
      
#    - name: Copy b64 var to local file
#      local_action: copy content="{{ b64.append-bootstrap }}" dest="./append-bootstrap.b64"
    
#    - name: Copy b64 var to local file
#      local_action: copy content="{{ b64.master }}" dest="./master.b64"
      
#    - name: Copy b64 var to local file
#      local_action: copy content="{{ b64.worker }}" dest="./worker.b64"

    - name: Create a virtual machine from a vcenter.template
      vmware_guest:
        hostname: "{{ vcenter.ip }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        validate_certs: no
        datacenter: "{{ vcenter.datacenter }}"
        vcenter.folder: "{{ vcenter.folder }}" 
        name: "{{ item.vm_name }}"
        state: present
        vcenter.template: "{{ vcenter.template }}"
        disk:
        - size_gb: "{{ vm.disk_gb }}"
          type: thin
          vcenter.datastore: "{{ vcenter.datastore }}"
        hardware:
          memory_mb: "{{ item.vm_ram }}"
          mem_reservation: "{{ item.vm_ram }}"
          num_cpus: "{{ item.vm_cpus }}" #For example to create a VM with 2 sockets of 4 cores, specify num_cpus: 8 and num_cpu_cores_per_socket: 4
          #num_cpu_cores_per_socket: "{{ vm_cpu_cores_per_socket }}"
          scsi: paravirtual
          boot_firmware: "efi"
        networks:
        - name: "VM Network"
          type: dhcp
      with_items:
          - "{{ table_item_worker1 }}"
          - "{{ table_item_worker2 }}"
          - "{{ table_item_master1 }}"
          - "{{ table_item_master2 }}"
          - "{{ table_item_master3 }}"
          - "{{ table_item_bootstrap }}"
      delegate_to: localhost
      
    - name: change configuration parameter
      vmware_guest_custom_attributes:
        hostname: "{{ vcenter.ip }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        validate_certs: no
        datacenter: "{{ vcenter.datacenter }}"
        vcenter.folder: "{{ vcenter.folder }}" 
        name: "{{ item.vm_name }}"
        state: present
        attributes:
          - name: guestinfo.ignition.config.data.encoding
            value: "base64"
          - name: disk.EnableUUID
            value: "TRUE"
          - name: guestinfo.ignition.config.data
            value: "{{ item.ignition_file }}"
      with_items:
          - "{{ table_item_worker1 }}"
          - "{{ table_item_worker2 }}"
          - "{{ table_item_master1 }}"
          - "{{ table_item_master2 }}"
          - "{{ table_item_master3 }}"
          - "{{ table_item_bootstrap }}"
      delegate_to: localhost
      
    - name: change mac address
      vmware_guest_network:
        hostname: "{{ vcenter.ip }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        validate_certs: no
        datacenter: "{{ vcenter.datacenter }}"
        vcenter.folder: "{{ vcenter.folder }}" 
        name: "{{ item.vm_name }}"
        gather_network_info: false
        networks:
          - label: "Network adapter 1"
            state: present
            manual_mac: "{{ item.vm_mac }}"
      with_items:
          - "{{ table_item_worker1 }}"
          - "{{ table_item_worker2 }}"
          - "{{ table_item_master1 }}"
          - "{{ table_item_master2 }}"
          - "{{ table_item_master3 }}"
          - "{{ table_item_bootstrap }}"
      delegate_to: localhost
